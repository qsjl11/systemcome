### **MVP需求文档**
版本号：0.5
最后更新：2025-01-26

---

### **一、项目概览**
#### 1.1 核心概念
玩家扮演网文中的「系统」，通过发布任务/提供奖励间接引导主角成长。主角拥有自主AI决策能力，游戏世界通过事件池驱动动态演化。

#### 1.2 技术栈
- 后端框架：Python + Flask
- 前端界面：HTML/CSS + JavaScript + AJAX
- 数据存储：SQLite
- AI支持：deepseek openai 1.0 接口兼容

---

### **二、功能需求**
#### 2.1 核心模块
| 模块 | 功能描述 | 接口示例 |
|------|----------|----------|
| **任务系统** | 发布/追踪/结算基础任务 | `/issue_task` POST请求，参数：type |
| **状态管理** | 管理角色属性与状态更新 | `/get_status` GET请求 |
| **事件系统** | 记录和展示系统事件 | 前端事件日志展示 |
| **主角AI** | 自主决策与反馈 | `/get_ai_action` GET请求 |
| **存档系统** | 管理游戏存档与读取 | `/save_game` POST请求 |

#### 2.2 数据模型
```python
# 数据库表结构
class Character(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    cultivation = db.Column(db.Integer, default=0)  # 修为
    trust = db.Column(db.Integer, default=50)       # 信任值
    stress = db.Column(db.Integer, default=0)       # 压力值
    
    # 新增性格维度
    alignment = db.Column(db.Float)       # 正邪倾向
    decision_style = db.Column(db.Float)  # 决策风格
    social_mode = db.Column(db.Float)     # 社交模式
    luck_sensitivity = db.Column(db.Float) # 机缘敏感

class Task(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    type = db.Column(db.String(20))  # 战斗/探索/社交
    status = db.Column(db.String(10), default='pending') # pending/success/fail
    reward = db.Column(db.Integer)

class SaveSlot(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    slot_num = db.Column(db.Integer, unique=True)  # 1-10存档位
    save_time = db.Column(db.DateTime)
    save_name = db.Column(db.String(50))
    character_data = db.Column(db.Text)  # JSON序列化角色数据
    task_data = db.Column(db.Text)       # JSON序列化任务数据
    event_log = db.Column(db.Text)       # JSON事件日志
```

#### 2.3 交互流程
```mermaid
sequenceDiagram
   玩家->>前端: 点击任务按钮
   前端->>后端: POST /issue_task
   后端->>数据库: 创建任务记录
   后端->>数据库: 更新角色状态
   后端-->>前端: 返回任务结果
   前端->>后端: GET /get_ai_action
   后端-->>前端: 返回AI决策
   前端->>前端: 更新事件日志
```

---

### **三、技术实现**
#### 3.1 后端架构
```bash
/flask_app
   ├── app.py              # 主程序
   ├── requirements.txt    # 项目依赖
   ├── core/              # 核心模块
   │   ├── models/       # 数据模型
   │   ├── services/     # 业务逻辑
   │   └── utils/        # 工具函数
   ├── templates/         # 网页模板
   │   └── index.html    # 主界面
   └── static/           # 静态资源
       └── style.css     # 样式文件
```

#### 3.2 关键算法
**主角决策逻辑**：
1. 基于性格维度计算行动权重
2. 结合当前状态和环境信息
3. 通过LLM生成合理的决策选项
4. 应用性格修正进行最终选择

#### 3.3 接口定义
| 端点 | 方法 | 参数 | 响应 |
|------|------|------|------|
| `/` | GET | - | 渲染主界面 |
| `/get_status` | GET | - | 返回角色状态JSON |
| `/issue_task` | POST | task_type | 返回任务结果JSON |
| `/get_ai_action` | GET | - | 返回AI决策JSON |
| `/save_game` | POST | slot_num, save_name | 保存结果 |
| `/load_game` | POST | slot_num | 加载存档数据 |

---

### **四、开发进度**
#### 4.1 已完成功能
- [x] 基础Flask应用搭建
- [x] 数据库模型实现
- [x] 核心API接口开发
- [x] 前端界面实现
- [x] 实时状态更新
- [x] 事件日志系统
- [x] 存档系统基础架构
- [x] 性格系统数据模型
- [x] LLM服务集成

#### 4.2 待开发功能
- [ ] 性格影响系统实现
- [ ] 动态事件池完善
- [ ] 剧情引擎开发
- [ ] 更多任务类型
- [ ] 成就系统
- [ ] 存档管理界面
- [ ] 自动存档功能
- [ ] 决策引擎V2
- [ ] 剧情推进检测器

#### 4.3 优先级排序
1. 性格影响系统（核心玩法）
2. 动态事件池（内容生成）
3. 存档管理界面（用户体验）
4. 决策引擎升级（AI交互）
5. 剧情系统（游戏深度）

---

### **五、风险与应对**

| 风险点 | 应对方案 |
|--------|----------|
| 存档数据膨胀 | 采用zlib压缩序列化数据<br>设置自动清理旧存档机制 |
| 数值崩坏 | 引入变化量封顶规则<br>每日操作次数限制 |
| LLM响应延迟 | 实现本地缓存机制<br>预生成常用响应 |
| 性格系统失衡 | 动态调整权重系数<br>增加平衡性测试用例 |

---

### **六、后续迭代计划**

#### 6.1 短期目标（1-2周）
1. 完善性格影响系统
2. 实现基础事件池
3. 开发存档管理界面
4. 补充单元测试

#### 6.2 中期目标（1个月）
1. 升级决策引擎
2. 丰富任务类型
3. 优化用户界面
4. 完善错误处理

#### 6.3 长期目标（3个月）
1. 实现完整剧情系统
2. 添加成就系统
3. 优化性能
4. 扩展游戏内容

---

### **七、设计原则**

1. **最小修改原则**：
   - 优先采用小规模、可控的修改
   - 避免影响现有稳定功能
   - 增量式开发和测试

2. **系统稳定性**：
   - 完善的错误处理机制
   - 定期数据备份
   - 性能监控和优化

3. **用户体验**：
   - 清晰的界面反馈
   - 合理的操作流程
   - 完整的新手引导

4. **可扩展性**：
   - 模块化设计
   - 标准化接口
   - 灵活的配置系统

---

### **八、更新日志**

#### v0.5 (2025-01-26)
- 更新了已完成功能列表
- 调整了开发优先级
- 完善了风险应对方案
- 新增了后续迭代计划
- 补充了设计原则说明

#### v0.4 (2025-01-25)
- 新增存档系统设计
- 新增性格系统设计
- 新增事件池系统设计
- 新增决策闭环系统设计

#### v0.3 (2025-01-24)
- 初始版本
- 基础功能规划
- 核心模块设计
