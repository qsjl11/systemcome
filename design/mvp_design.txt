### **MVP需求文档**
版本号：0.2
最后更新：2025-01-25

---

### **一、项目概览**
#### 1.1 核心概念
玩家扮演网文中的「系统」，通过发布任务/提供奖励间接引导主角成长。主角拥有自主AI决策能力，游戏世界通过事件池驱动动态演化。

#### 1.2 技术栈
- 后端框架：Python + Flask
- 前端界面：HTML/CSS + JavaScript + AJAX
- 数据存储：SQLite
- AI支持：deepseek openai 1.0 接口兼容

---

### **二、功能需求**
#### 2.1 核心模块
| 模块 | 功能描述 | 接口示例 |
|------|----------|----------|
| **任务系统** | 发布/追踪/结算基础任务 | `/issue_task` POST请求，参数：type |
| **状态管理** | 管理角色属性与状态更新 | `/get_status` GET请求 |
| **事件系统** | 记录和展示系统事件 | 前端事件日志展示 |
| **主角AI** | 自主决策与反馈 | `/get_ai_action` GET请求 |

#### 2.2 数据模型
```python
# 数据库表结构
class Character(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    cultivation = db.Column(db.Integer, default=0)  # 修为
    trust = db.Column(db.Integer, default=50)       # 信任值
    stress = db.Column(db.Integer, default=0)       # 压力值

class Task(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    type = db.Column(db.String(20))  # 战斗/探索/社交
    status = db.Column(db.String(10), default='pending') # pending/success/fail
    reward = db.Column(db.Integer)
```

#### 2.3 交互流程
```mermaid
sequenceDiagram
   玩家->>前端: 点击任务按钮
   前端->>后端: POST /issue_task
   后端->>数据库: 创建任务记录
   后端->>数据库: 更新角色状态
   后端-->>前端: 返回任务结果
   前端->>后端: GET /get_ai_action
   后端-->>前端: 返回AI决策
   前端->>前端: 更新事件日志
```

---

### **三、技术实现**
#### 3.1 后端架构
```bash
/flask_app
   ├── app.py              # 主程序
   ├── requirements.txt    # 项目依赖
   ├── templates/          # 网页模板
   │   └── index.html     # 主界面
   └── static/            # 静态资源
       └── style.css      # 样式文件
```

#### 3.2 关键算法
**主角决策逻辑**：


#### 3.3 接口定义
| 端点 | 方法 | 参数 | 响应 |
|------|------|------|------|
| `/` | GET | - | 渲染主界面 |
| `/get_status` | GET | - | 返回角色状态JSON |
| `/issue_task` | POST | task_type | 返回任务结果JSON |
| `/get_ai_action` | GET | - | 返回AI决策JSON |

---

### **五、开发计划**
#### 5.1 已完成功能
- [x] 基础Flask应用搭建
- [x] 数据库模型实现
- [x] 核心API接口开发
- [x] 前端界面实现
- [x] 实时状态更新
- [x] 事件日志系统

#### 5.2 待开发功能
- [ ] AI决策系统增强
- [ ] 事件池系统实现
- [ ] 剧情引擎开发
- [ ] 更多任务类型
- [ ] 成就系统

---
### **需求文档更新说明**
版本号：0.3 → 0.4
更新日期：2025-01-25 → 2025-01-26

---

### **一、主要修改内容**

#### 1.1 新增存档系统
```python
# 数据模型新增
class SaveSlot(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    slot_num = db.Column(db.Integer, unique=True)  # 1-10存档位
    save_time = db.Column(db.DateTime)
    save_name = db.Column(db.String(50))
    character_data = db.Column(db.Text)  # JSON序列化角色数据
    task_data = db.Column(db.Text)       # JSON序列化任务数据
    event_log = db.Column(db.Text)       # JSON事件日志
```

| 新增接口 | 方法 | 参数 | 响应 |
|---------|------|------|------|
| `/save_game` | POST | slot_num, save_name | 保存结果 |
| `/load_game` | POST | slot_num | 加载存档数据 |
| `/get_saves` | GET | - | 返回所有存档信息 |

#### 1.2 决策闭环系统
```mermaid
graph TD
    A[玩家输入] --> B{生成指定任务}
    B -->|环境设定| D[修改世界参数]
    E[事件池] --> F{触发条件}
    F -->|时间推移| G[随机事件]
    F -->|数值阈值| H[关键事件]
    I[选项生成] --> J(A/B/C)
    K[主角决策] --> L(性格权重)
    L --> M[大模型推理]
    M --> N[动作输出]
```

---

### **二、后续开发计划**

#### 2.1 数据库改造（1-2天）
- 新增save_slot表结构
- 添加剧情进度字段到Character表
- 增加性格维度字段（刚正/中庸/灵活）

#### 2.2 存档系统实现（3天）
```bash
/flask_app
   ├── save_system.py        # 存档管理模块
   └── utils
       └── serializer.py    # 数据序列化工具
```
- 实现存档快照生成逻辑
- 开发存档槽位管理界面
- 添加自动存档机制（关键节点触发）

#### 2.3 闭环系统开发（5-7天）
| 模块 | 技术要点 |
|------|----------|
| **事件池** | 权重概率算法实现<br>事件冷却时间控制 |
| **决策引擎** | 性格修正矩阵设计<br>deepseek-llm接口集成 |
| **反馈系统** | 五维数值平衡公式<br>剧情进度通过deepseek-llm推演 |
| **剧情检测** | 阈值触发器开发<br>关键节点衔接逻辑 |

---

### **三、系统架构调整**

#### 3.1 新版数据流
```mermaid
flowchart LR
    玩家操作 --> 存档系统
    世界演化 --> 事件池
    事件池 --> 决策引擎
    决策引擎 --> 大模型
    大模型 --> 剧情检测
    剧情检测 --> 新事件注入
```

#### 3.2 数值平衡设计


---

### **四、风险与应对**

| 风险点 | 应对方案 |
|--------|----------|
| 存档数据膨胀 | 采用zlib压缩序列化数据<br>设置自动清理旧存档机制 |
| 数值崩坏 | 引入变化量封顶规则<br>每日操作次数限制 |

---

### **五、版本计划更新**

#### 5.1 待开发功能更新
- [ ] 存档管理系统
- [ ] 性格影响系统
- [ ] 动态事件池
- [ ] 剧情推进检测器
- [ ] 决策引擎V2
- [ ] 自动存档功能

#### 5.2 优先级排序
1. 存档系统基础功能（核心数据安全）
2. 决策闭环中的大模型对接（核心玩法）
3. 事件池与剧情检测（内容扩展基础）
4. 前端适配（用户体验优化）

---

### **人物属性与性格系统优化方案**
（整合修仙体系与复杂性格模型）

---

### **一、修仙属性体系重构**

#### 1.1 基础五维属性
| 属性 | 说明 | 数值范围 | 影响领域 |
|------|------|----------|----------|
| **气血** | 生命强度 | 100-∞ | 战斗存活/受伤恢复 |
| **灵力** | 法力储备 | 100-∞ | 施法消耗/功法威力 |
| **神识** | 精神强度 | 1-100 | 探查范围/抗幻术 |
| **体魄** | 肉体强度 | 1-100 | 物理防御/负重 |
| **气运** | 天命机缘 | 1-100 | 奇遇概率/危机化解 |

#### 1.2 境界系统
```python
# 新增境界模型
CULTIVATION_STAGES = {
    0: ("凡人", "气血+10%"),
    1: ("炼气期", "灵力上限+100"),
    3: ("筑基期", "神识成长+2/级"),
    5: ("金丹期", "可御剑飞行"),
    8: ("元婴期", "气运固化")
}

class CultivationProgress(db.Model):
    stage = db.Column(db.Integer)  # 境界阶段
    realm = db.Column(db.String(20)) # 小境界(初期/中期/后期)
    breakthrough_chance = db.Column(db.Float)  # 破境成功率
```

#### 1.3 灵根与功法
```mermaid
graph TD
    A[灵根资质] --> B(金系灵根)
    A --> C(木系灵根)
    A --> D(水系灵根)
    A --> E(火系灵根)
    A --> F(土系灵根)
    G[功法匹配度] --> H(基础加成+20%)
    G --> I(走火入魔率-15%)
```

---

### **二、多维性格系统**

#### 2.1 性格维度矩阵
| 维度 | 说明 | 区间 | 典型角色 |
|------|------|------|----------|
| **正邪倾向** | -100(魔道) ~ +100(正道) | [-100,100] | 韩立(-20) vs 叶凡(+60) |
| **决策风格** | 0(谨慎) ~ 100(激进) | [0,100] | 李长寿(30) vs 荒天帝(90) |
| **社交模式** | 0(独行) ~ 100(合群) | [0,100] | 王林(15) vs 方源(40) |
| **机缘敏感** | 0(务实) ~ 100(赌性) | [0,100] | 孟浩(85) vs 白小纯(95) |
| **道心类型** | 枚举值(守护/复仇/求知等) | - | 罗峰(守护) vs 楚枫(复仇) |

#### 2.2 性格影响规则
```python
def calculate_action_weight(options):
    # 示例：战斗选项权重计算
    base_weight = options['combat']
    
    # 正邪倾向修正（魔道角色+20%战斗倾向）
    if character.alignment < -50:
        base_weight *= 1.2
        
    # 决策风格修正（激进风格+30%高收益选项）
    if character.decision_style > 70:
        base_weight += (risk_reward * 0.3)
        
    # 道心类型修正（复仇道心对仇敌+50%伤害）
    if character.dao_heart == 'revenge':
        base_weight *= 1.5 if enemy.is_nemesis else 1.0
        
    return normalized_weight
```

---

### **三、状态可视化方案**

#### 3.1 角色面板设计
```javascript
// 前端示例数据结构
const characterSheet = {
  cultivation: {
    stage: "金丹初期",
    nextBreakthrough: "72%",
    meridians: ["任脉贯通", "督脉阻塞"]
  },
  attributes: {
    qi: { value: 8500, max: 12000 },
    spirit: { value: 4200, regen: "85/s" }
  },
  karma: {
    mortalEnemies: ["血刀老祖", "合欢宗"],
    benefactors: ["玄天剑派"]
  }
}
```

#### 3.2 数值关系公式
```
境界压制系数 = (己方境界阶段 - 敌方境界阶段) * 0.15
有效灵力 = 基础灵力 × (1 + 功法匹配度) × (1 + 灵根补正)
渡劫成功率 = 神识×0.3 + 体魄×0.2 + 气运×0.5 + 丹药加成
```

---

### **四、开发实施计划**

#### 4.1 数据模型升级（2天）
```python
# 新版Character模型
class Character(db.Model):
    # 境界系统
    cultivation_stage = db.Column(db.Integer)
    cultivation_realm = db.Column(db.String(10))
    
    # 五维基础
    vitality = db.Column(db.Integer)  # 气血
    spiritual_power = db.Column(db.Integer) # 灵力
    
    # 灵根资质
    metal_affinity = db.Column(db.Float)  # 金
    wood_affinity = db.Column(db.Float)   # 木
    
    # 性格维度
    alignment = db.Column(db.Float)       # 正邪倾向
    decision_style = db.Column(db.Float)  # 决策风格
```

#### 4.2 系统关联改造
1. **任务系统适配**：增加境界要求字段
2. **战斗计算模块**：接入五维属性公式
3. **AI决策引擎**：整合性格影响算法
4. **奇遇事件池**：绑定气运值与机缘敏感度

#### 4.3 前端呈现优化
- 境界突破特效动画
- 灵根资质雷达图
- 性格维度玫瑰图
- 实时属性变化曲线

---

### **五、设计验证用例**

#### 用例1：魔道激进型角色
```json
{
  "alignment": -80,
  "decision_style": 90,
  "cultivation": "元婴中期",
  "meridians": ["血煞魔脉激活"],
  "karma": {
    "mortalEnemies": ["正道联盟"],
    "secretArts": ["血神子"]
  }
}
```
**预期行为**：优先选择高风险高回报选项，对正道NPC初始好感-50%

#### 用例2：稳健苟道流角色
```json
{
  "alignment": 30,
  "decision_style": 20,
  "cultivation": "筑基大圆满",
  "talent": "九窍玲珑心",
  "equipment": ["千年龟甲×3"]
}
```
**预期行为**：遇到危险时80%概率选择撤退，洞府防御阵法强度+200%

---

### **六、平衡性注意事项**
1. 境界提升需满足三维阈值（例：筑基要求气血>5000）
2. 性格维度动态变化机制（重大事件影响倾向）
3. 气运值衰减规则（过度依赖机缘会导致气运下滑）
4. 功法冲突检测（正邪心法不可兼修）

---