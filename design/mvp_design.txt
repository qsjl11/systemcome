### **MVP需求文档**
版本号：0.2
最后更新：2025-01-25

---

### **一、项目概览**
#### 1.1 核心概念
玩家扮演网文中的「系统」，通过发布任务/提供奖励间接引导主角成长。主角拥有自主AI决策能力，游戏世界通过事件池驱动动态演化。

#### 1.2 技术栈
- 后端框架：Python + Flask
- 前端界面：HTML/CSS + JavaScript + AJAX
- 数据存储：SQLite
- AI支持：deepseek openai 1.0 接口兼容

---

### **二、功能需求**
#### 2.1 核心模块
| 模块 | 功能描述 | 接口示例 |
|------|----------|----------|
| **任务系统** | 发布/追踪/结算基础任务 | `/issue_task` POST请求，参数：type |
| **状态管理** | 管理角色属性与状态更新 | `/get_status` GET请求 |
| **事件系统** | 记录和展示系统事件 | 前端事件日志展示 |
| **主角AI** | 自主决策与反馈 | `/get_ai_action` GET请求 |

#### 2.2 数据模型
```python
# 数据库表结构
class Character(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    cultivation = db.Column(db.Integer, default=0)  # 修为
    trust = db.Column(db.Integer, default=50)       # 信任值
    stress = db.Column(db.Integer, default=0)       # 压力值

class Task(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    type = db.Column(db.String(20))  # 战斗/探索/社交
    status = db.Column(db.String(10), default='pending') # pending/success/fail
    reward = db.Column(db.Integer)
```

#### 2.3 交互流程
```mermaid
sequenceDiagram
   玩家->>前端: 点击任务按钮
   前端->>后端: POST /issue_task
   后端->>数据库: 创建任务记录
   后端->>数据库: 更新角色状态
   后端-->>前端: 返回任务结果
   前端->>后端: GET /get_ai_action
   后端-->>前端: 返回AI决策
   前端->>前端: 更新事件日志
```

---

### **三、技术实现**
#### 3.1 后端架构
```bash
/flask_app
   ├── app.py              # 主程序
   ├── requirements.txt    # 项目依赖
   ├── templates/          # 网页模板
   │   └── index.html     # 主界面
   └── static/            # 静态资源
       └── style.css      # 样式文件
```

#### 3.2 关键算法
**主角决策逻辑**：


#### 3.3 接口定义
| 端点 | 方法 | 参数 | 响应 |
|------|------|------|------|
| `/` | GET | - | 渲染主界面 |
| `/get_status` | GET | - | 返回角色状态JSON |
| `/issue_task` | POST | task_type | 返回任务结果JSON |
| `/get_ai_action` | GET | - | 返回AI决策JSON |

---

### **五、开发计划**
#### 5.1 已完成功能
- [x] 基础Flask应用搭建
- [x] 数据库模型实现
- [x] 核心API接口开发
- [x] 前端界面实现
- [x] 实时状态更新
- [x] 事件日志系统

#### 5.2 待开发功能
- [ ] AI决策系统增强
- [ ] 事件池系统实现
- [ ] 剧情引擎开发
- [ ] 更多任务类型
- [ ] 成就系统

---
### **需求文档更新说明**
版本号：0.3 → 0.4
更新日期：2025-01-25 → 2025-01-26

---

### **一、主要修改内容**

#### 1.1 新增存档系统
```python
# 数据模型新增
class SaveSlot(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    slot_num = db.Column(db.Integer, unique=True)  # 1-10存档位
    save_time = db.Column(db.DateTime)
    save_name = db.Column(db.String(50))
    character_data = db.Column(db.Text)  # JSON序列化角色数据
    task_data = db.Column(db.Text)       # JSON序列化任务数据
    event_log = db.Column(db.Text)       # JSON事件日志
```

| 新增接口 | 方法 | 参数 | 响应 |
|---------|------|------|------|
| `/save_game` | POST | slot_num, save_name | 保存结果 |
| `/load_game` | POST | slot_num | 加载存档数据 |
| `/get_saves` | GET | - | 返回所有存档信息 |

#### 1.2 决策闭环系统
```mermaid
graph TD
    A[玩家输入] --> B{生成指定任务}
    B -->|环境设定| D[修改世界参数]
    E[事件池] --> F{触发条件}
    F -->|时间推移| G[随机事件]
    F -->|数值阈值| H[关键事件]
    I[选项生成] --> J(A/B/C)
    K[主角决策] --> L(性格权重)
    L --> M[大模型推理]
    M --> N[动作输出]
```

---

### **二、后续开发计划**

#### 2.1 数据库改造（1-2天）
- 新增save_slot表结构
- 添加剧情进度字段到Character表
- 增加性格维度字段（刚正/中庸/灵活）

#### 2.2 存档系统实现（3天）
```bash
/flask_app
   ├── save_system.py        # 存档管理模块
   └── utils
       └── serializer.py    # 数据序列化工具
```
- 实现存档快照生成逻辑
- 开发存档槽位管理界面
- 添加自动存档机制（关键节点触发）

#### 2.3 闭环系统开发（5-7天）
| 模块 | 技术要点 |
|------|----------|
| **事件池** | 权重概率算法实现<br>事件冷却时间控制 |
| **决策引擎** | 性格修正矩阵设计<br>deepseek-llm接口集成 |
| **反馈系统** | 五维数值平衡公式<br>剧情进度通过deepseek-llm推演 |
| **剧情检测** | 阈值触发器开发<br>关键节点衔接逻辑 |

---

### **三、系统架构调整**

#### 3.1 新版数据流
```mermaid
flowchart LR
    玩家操作 --> 存档系统
    世界演化 --> 事件池
    事件池 --> 决策引擎
    决策引擎 --> 大模型
    大模型 --> 剧情检测
    剧情检测 --> 新事件注入
```

#### 3.2 数值平衡设计
```python
# 性格影响公式
def personality_impact(action_options):
    # 刚正型偏好战斗选项(+20%权重)
    # 灵活型偏好探索选项(+15%成功率)
    # 中庸型压力增长减缓(-30%)
    return adjusted_actions
```

---

### **四、风险与应对**

| 风险点 | 应对方案 |
|--------|----------|
| 存档数据膨胀 | 采用zlib压缩序列化数据<br>设置自动清理旧存档机制 |
| 决策延迟 | 大模型响应缓存设计<br>本地决策树fallback机制 |
| 数值崩坏 | 引入变化量封顶规则<br>每日操作次数限制 |

---

### **五、版本计划更新**

#### 5.1 待开发功能更新
- [ ] 存档管理系统
- [ ] 性格影响系统
- [ ] 动态事件池
- [ ] 剧情推进检测器
- [ ] 决策引擎V2
- [ ] 自动存档功能

#### 5.2 优先级排序
1. 存档系统基础功能（核心数据安全）
2. 决策闭环中的大模型对接（核心玩法）
3. 事件池与剧情检测（内容扩展基础）
4. 前端适配（用户体验优化）

---

**注：本版文档生效后，需同步更新API文档并召开技术评审会**